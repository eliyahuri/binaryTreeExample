{
  "app_title": "Eliyahu's Tree Visualizer",
  "app_subtitle": "Explore the fascinating world of data structures with interactive visualizations",
  "understanding_title": "Understanding Data Structures",
  "understanding_subtitle": "Explore different tree data structures and their implementations across multiple programming languages",
  "treeTypeLabel": "Tree Type",
  "valueLabel": "Value",
  "programmingLanguageLabel": "Programming Language",
  "option_BST": "Binary Search Tree",
  "option_AVL": "AVL Tree",
  "option_RBT": "Red-Black Tree",
  "button_Insert": "Insert",
  "button_Delete": "Delete",
  "button_Random": "Random",
  "button_Clear": "Clear",
  "button_Copied": "Copied!",
  "placeholder_value": "Enter value",
  "footer_copyright": "Â© {{year}} Eliyahu Huri. All rights reserved.",
  "button_star": "Star on GitHub",
  "switch_to_dark": "Switch to dark mode",
  "switch_to_light": "Switch to light mode",
  "select_language": "Language",
  "language_en": "English",
  "language_he": "Hebrew",
  "description_BST": "Binary Search Tree keeps elements ordered to allow fast lookup, insertion, and deletion operations.",
  "description_AVL": "AVL Tree is a self-balancing BST ensuring logarithmic height by performing rotations when needed.",
  "description_RBT": "Red-Black Tree is a balanced BST using color properties to maintain efficient operations with guaranteed O(log n) complexity."
}
